from baml_client import b
from baml_client.types import Steps, Answer


def generate_plan(user_input: str, available_functions) -> list[Steps]:
    """
    Generate a plan based on the user input and available functions.
    Args:
        user_input (str): The user input describing the problem.
        available_functions (list): The available functions to use in the plan.
    Returns:
        list[Steps]: The generated plan as a list of steps.
    """
    plan = b.GeneratePlan(user_input, available_functions=available_functions)
    print(f"Plan: {plan}")

    return plan

def execute_plan(plan: list[Steps], tools: list) -> Answer:
    """
    Execute the plan generated by the agent.
    Args:
        plan (list[Steps]): The plan generated by the agent.
        tools (list): The available functions to execute.
    Returns:
        Answer: The final answer after executing the plan.
    """

    print(f"Executing plan: {plan}")
    # Execute the plan
    result = 0
    updated_input = ""
    for index, step in enumerate(plan):
        if isinstance(step, Steps):
        
            function_name = step.function_name
            input = updated_input + step.step
            print(f"\nInput: {input}")
            if function_name == "Add" and function_name in tools:
                result = b.Add(input)
            elif function_name == "Subtract" and function_name in tools:
                result = b.Subtract(input)
            elif function_name == "Multiply" and function_name in tools:
                result = b.Multiply(input)
            elif function_name == "Divide" and function_name in tools:
                result = b.Divide(input)
            else:
                print(f"Unknown functon name: {function_name}")

            updated_input =  f"The result from the previous step is: {result.answer}. Next step: "

        else:
            print(f"Plan output format is incorrect: {type(step)}")
        
        print(f"Result of step {index}: {result.answer}")
    
    return result


if __name__ == "__main__":
    user_input = "Get the sum of ten and twenty, then multiply it by hundred"
    # user_input = input("Please describe the problem: ")

    available_functions = [
        {
            "name": "Add",
            "description": "Add two numbers",
        },
        {
            "name": "Subtract",
            "description": "Subtract two numbers",
        },
        {
            "name": "Multiply",
            "description": "Multiply two numbers",
        },
        {
            "name": "Divide",
            "description": "Divide two numbers",
        }
    ]
    tools = [tool["name"] for tool in available_functions]
    plan = generate_plan(user_input=user_input, available_functions=available_functions)

    if not plan:
        print("Sorry plan generation failed.")
        exit(1)
    
    # Uncomment the following lines to ask for user approval before executing the plan
    # user_approval = input(f"Plan generated: {plan}. Do you want to proceed? (yes/no): ")
    # if user_approval.lower() != "yes":
    #     print("Plan execution aborted by user.")
    #     exit(0)

    response = execute_plan(plan, tools)
    print(f"Final response: {response.answer}")
