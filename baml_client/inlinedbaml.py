###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "chat.baml": "class MyUserMessage{\n    role \"user\" | \"assistant\"\n    content string\n}\n\nfunction ChatWithLLM(messages: MyUserMessage[]) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Reply to the following messages in a friendly and helpful manner, based on the conversation\n        {% for message in messages %}\n        {{ _.role(message.role) }}: {{ message.content }}\n        {% endfor %}\n\n        Answer:\n    \"#\n}\n\ntest TestName {\n    functions [ChatWithLLM]\n    args   {\n        messages [\n            { role \"user\", content \"Hello, how are you?\" },\n            { role \"assistant\", content \"I'm doing well, thank you!\" } \n        ]\n    }\n}",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
    "spam_classifier.baml": "enum UserMessage{\n    SPAM\n    NOT_SPAM\n}\n\nfunction ClassifyText(text: string) -> UserMessage {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        classify the following message:\n            \n        \n        {{ctx.output_format}}\n\n        {{_.role(\"user\")}}\n        text: {{text}}\n        \n    \"#\n}\n\ntest BasicSpamTest {\n    functions [ClassifyText]\n    args {\n        text \"Congratulations! You've won a $1000 gift card. Click here to claim your prize.\"\n    }\n}\n\ntest BasicNotSpamTest {\n    functions [ClassifyText]\n    args {\n        text \"Hey, do you want to grab lunch tomorrow?\"\n    }\n}\n\nenum TicketLabel {\n  ACCOUNT\n  BILLING\n  GENERAL_QUERY\n}\nclass TicketClassification {\n  labels TicketLabel[]\n}\n\nfunction ClassifyTicket(ticket: string) -> TicketClassification {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    You are a support agent at a tech company. Analyze the support ticket and select all applicable labels.\n    {{ ctx.output_format }}\n    {{ _.role(\"user\") }}\n    \n    {{ ticket }}\n  \"#\n}\n\ntest ClassifyTicketSingleLabel {\n  functions [ClassifyTicket]\n  args {\n    ticket \"I want to increase my salary\"\n  }\n}\ntest ClassifyTicketMultiLabel {\n  functions [ClassifyTicket]\n  args {\n    ticket \"My account is locked and I can't access my billing information\"\n  }\n}\n\n",
    "tools.baml": "class WeatherAPI {\n  city string\n  time string @description(\"Current time in ISO8601 format\")\n  temperature string @description(\"Temperature in Celsius\")\n}\n\nclass CalculatorAPI {\n    answer string @description(#\" The answer to the calculation.\n        The answer should be a string, even if it is a number.\n        For example, if the answer is 42, it should be returned as \"42\".\n        Use BODMAS to calculate the answer.\n    \"#)\n}\n\n\n\nfunction SelectTool(message: string) -> WeatherAPI | CalculatorAPI {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Given a message, extract info.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ message }}\n  \"#\n}",
}

def get_baml_files():
    return file_map