###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Answer(BaseModel):
    answer: Optional[float] = None

class CalculatorAPI(BaseModel):
    answer: Optional[str] = None

class Functions(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None

class MyUserMessage(BaseModel):
    role: Optional[Union[Literal["user"], Literal["assistant"]]] = None
    content: Optional[str] = None

class PIIData(BaseModel):
    index: Optional[int] = None
    dataType: Optional[str] = None
    value: Optional[str] = None

class PIIExtraction(BaseModel):
    privateData: List["PIIData"]
    containsSensitivePII: Optional[bool] = None

class Response(BaseModel):
    question: Optional[str] = None
    answer: Optional[str] = None

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[str]
    skills: List[str]

class Steps(BaseModel):
    step: Optional[str] = None
    function_name: Optional[str] = None

class SubTask(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None

class Ticket(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    assignedTo: Optional[str] = None
    priority: Optional[types.Priority] = None
    subTasks: List["SubTask"]
    dependencies: List[int]

class TicketClassification(BaseModel):
    labels: List[types.TicketLabel]

class WeatherAPI(BaseModel):
    city: Optional[str] = None
    time: Optional[str] = None
    temperature: Optional[str] = None
